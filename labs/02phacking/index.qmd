---
title: "P-hacking"
format: 
  html:
    theme: 
      light: flatly
      dark: darkly
  docx:
    date: Aug 31, 2023
---

## Agenda

-   Today's lab
    -   What is p-hacking?
    -   [Train your p-hacking skills!](https://shinyapps.org/apps/p-hacker/)

## What is p-hacking?

P-hacking is the introduction of bias into a study or experiment that increases the likelihood of small p-values independent of any "real" correlation between the measured variables and the outcome of interest.

Did you know that the per capita cheese consumption correlates with the number of people who died by becoming tangled in their bed sheets between 1999 and 2009?

![](chart01.png)

Did you know that the total revenue generated by arcades correlates with the number of computer science doctorates awarded in the US between 1999 and 2009?

![](chart02.png)

You can check out these and many other "interesting" results on Tyler Vigen's website, [Spurious correlations](https://www.tylervigen.com/spurious-correlations). These facts are intriguing until you look a little closer into how he discovered these factoids. He basically took every statistic he could find between 1999 and 2009, from death rates, to consumer trends, to spending, and compared them all with each other. He has found some really entertaining bogus correlations.

When it comes down to it, if you really want to make a case with data, you can hack your way to a story without too much work. Let's say we want to tell a story about what makes a great data scientist.

-   Let's start by sending out a survey to all of our data scientist friends, asking:
    -   Age
    -   Gender
    -   Favorite color
    -   Shoe size
    -   Hair color
    -   Wedding ring size
    -   Number of milkshakes eaten each month
    -   Distance to the nearest Walmart
-   We'll walk up and down Carroll Creek, asking "random" passersby to respond to the same survey.
-   If we don't find any "significant" correlations, we'll simply come up with some additional questions until we find something that stands out.

It will not take long for us to find a story - perhaps we'll discover that drinking as few as three extra beers during each full moon will make us better data scientists!

## P-hacking practice

For this part of the lab, we will be using the [p-hacker](https://shinyapps.org/apps/p-hacker/) app developed by Felix Sch√∂nbrodt.

1.  Start by picking experimental and control groups. For my research, I'd like to find out what makes people good at data science!
    -   Experimental group: Data scientists
    -   Control group: Random pedestrian walking down Carroll Creek.
2.  We'll use defaults for the rest of the options. Can you find a random seed that results in something publishable? (For the purposes of this lab, we'll say that anything with a p-value less than 0.05 is publishable.)

::: {.callout-important collapse="true"}
## Random seed 1521

-   DV1 looks pretty good, except there is a pesky outlier at the bottom of the random pedestrian group. Let's drop it, because it looks suspicious.
-   We have acheived significance!
-   Time to publish.
:::

3.  Try some other options and see what interesting results you can come up with.
    -   Increasing the number of variables (`Number of DV's`) will increase your chances of finding something "interesting".
    -   A smaller sample size is usually more prone to false positive findings, but try adding a few participants at a time until you get something significant.
    -   Controlling for different variables (socioeconomic status, age, gender, ...) might help. If it does, great! If not, you can skip that part.

::: {.callout-important collapse="true"}
## Random seed 827346

-   Number of DV's 10
-   Add 5 new participants.
-   DV3 looks pretty good!
:::

::: callout-caution
## What *not* to do

These are great examples of how *not* to run a study. While these ideas look pretty egregious, it is surprisingly easy to p-hack. Keeping a watchful eye out for p-hacking will save you grief and wasted time!
:::

## Magic Coin

I have a magic coin. Every time I flip the coin, I get a heads! I'll prove it to you.

```{r}
#| echo: false
# seed that gives 29 heads: 1870225129
set.seed(236903047)
```

```{r}
# 1 = Heads, 0 = Tails
rbinom(10, 1, 0.5)
```

Don't believe that it always gives me heads? Let's try that again:

```{r}
# 1 = Heads, 0 = Tails
rbinom(10, 1, 0.5)
```

And again:

```{r}
# 1 = Heads, 0 = Tails
rbinom(10, 1, 0.5)
```

OK, if you check the code behind this page, you'll see that I used a specific random seed. It will actually generate 30 "heads" in a row. The probability of that is approximately `r signif(0.5^30, 2)`, but it doesn't take much work to find one of those special random seeds if you are patient.

Your challenge: Find a random seed that results in at least 10 heads in a row.

Advanced challenge: Create a magic coin shiny app that will allow you to identify a seed that will result in an arbitrary number of heads. I've given you starter code [here](https://classroom.github.com/a/NpOj4BJz).

-   Clone your fork to your local machine.

-   Complete the app.

-   Push your completed app to GitHub.
